// This file generates a Consul template for our app config (for use by Nomad)
// The template will create a config.json to be loaded at runtime by the app.
// If used from the CLI, values will be read from `configValues.js`.
//
// Usage:
//   From the CLI: node generateConsulTemplate.js (prints to stdout)
//   As an import: const { generate } = require("./generateConsulTemplate");
//
// Example output:
// {
//   "url_basePath": {{ key "path/to/variables/${env}/url_basePath" | parseBool | toJSON }},
//   "url_publicPath": {{ key "path/to/variables/${env}/url_publicPath" | parseFloat | toJSON }},
//   "url_historyType": {{ key "path/to/variables/${env}/url_historyType" | toJSON }}
// }

const ENV_VAR = "${env}"; // eslint-disable-line no-template-curly-in-string
const ROOT_PATH = "path/to/variables";
const makePath = (key) => `${ROOT_PATH}/${ENV_VAR}/${key}`;
const COMMENT = `  "// Comment": "THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.",`;

const parseType = {
  boolean: "parseBool",
  number: "parseFloat",
  string: null,
};

const makeContents = (config) =>
  Object.keys(config).reduce((acc, configKey, i, src) => {
    const path = makePath(configKey);

    const parser = parseType[typeof config[configKey]];
    const parserSyntax = parser ? `| ${parser} ` : "";

    // JSON disallows trailing comma at last line
    const trailingComma = i < src.length - 1 ? "," : "";

    // toJSON will wrap strings in "quotation marks" if needed
    const nextLine = `  "${configKey}": {{ key "${path}" ${parserSyntax}| toJSON }}${trailingComma}`;

    return [acc, nextLine].join("\n");
  }, "");

const generate = (config) => {
  const contents = makeContents(config);

  return `{\n${COMMENT}${contents}\n}\n`;
};

if (require.main === module) {
  const { appConfig } = require("../configValues"); // eslint-disable-line global-require
  console.log(generate(appConfig)); // eslint-disable-line no-console
}

module.exports = {
  ENV_VAR,
  ROOT_PATH,
  generate,
};
